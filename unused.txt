        function getMatch(str1: string, str2: string) {
           if (typeof str1 !== 'string' || typeof str2 !== 'string') {
              throw new TypeError('Both arguments must be strings')
           }
          
            let matchCount = 0
          
            for (let i = 0; i < Math.min(str1.length, str2.length); i++) {
              if (str1[i] === str2[i]) {
                matchCount++
              }
            }
          
            return matchCount
          }

           /*
        if (activePins[m.sender]) {
      const { pin, command, args } = activePins[m.sender]
      if (m.text.trim() === pin.trim()) {
        delete activePins[m.sender]
        await executeCommand(sock, m, Worker, command, { prefix, args })
        return
      }
    }
        case command.needPing:
          const PIN = String(Math.floor(1000 + Math.random() * 9000)) 
          activePins[m.sender] = { pin: PIN, command, args, wait: setTimeout(() => {
            if (activePins[m.sender]) sock.sendText(m.chat, `no te pudiste verificar correctamente.`, m)
            delete activePins[m.sender]
            }, 60000) }
          return await sock.sendMessage(m.chat, { text: `Se te ha enviado un PIN de autorización único para este comando en tu consola.\nIntroduce tu PIN para continuar:` }, { quoted: m })
          const commandNames = Array.from(commandHandler.keys())
        let mostSimilarCommand = commandNames[0]
        let highestMatchCount = getMatch(commandName, mostSimilarCommand)

        for (const name of commandNames) {
            if (typeof name === 'string' && typeof commandName === 'string') {
                const matchCount = getMatch(commandName, name)
                if (matchCount > highestMatchCount) {
                    highestMatchCount = matchCount
                    mostSimilarCommand = name
                }
            }
        }

        const msg = `Comando no encontrado. Quizás quisiste decir: ${prefix}${mostSimilarCommand}`
        await sock.sendMessage(m.chat, { text: msg }, { quoted: m })*/

          if (budy.startsWith('=>')) {
      if (!isOwner) return
      new Promise((resolve, reject) => {
      try {
        resolve(eval("(async() => {" + args + "})()"))
      } catch (err: unknown) {
        reject(err)
      }
     }).then((res) => m.reply(inspect(res, true))).catch((err) => m.reply(inspect(err, true)))
  }
  if (m.body.startsWith("$") && isOwner) {
    new Promise<string>((resolve, reject) => {
      exec(`${args}`, { windowsHide: true }, (err, stdout, stderr) => {
        if (err) return reject(err)
        if (stderr) return reject(stderr)
        resolve(stdout)
      })
    }).then((res) => m.reply(inspect(res, true))).catch((err) => m.reply(inspect(err, true)))
  }
  ${activePins[m.sender] ? `✅ PIN: ${activePins[m.sender].pin}` : ''}

  export const welcomes = async (sock: client, m: proto.IWebMessageInfo) => {
  if (!m.messageStubType || !m.key.remoteJid) return !0
  const chats = globalThis.db?.data?.chats[m.key.remoteJid] || {} as ChatType
  if (chats?.ban) return
  const sender = m.key.fromMe ? (sock.user.id.split(":")[0]+'@s.whatsapp.net' || sock.user.id) : (m.key.participant || m.key.remoteJid)
  const groupMetadata = m.key.remoteJid.endsWith('@g.us') && (await sock.getMetadata(m.key.remoteJid))
  const groupName = (await sock.getMetadata(m.key.remoteJid)).subject ||  groupMetadata.subject
  const mentionsString: string[] = [sender, m.messageStubParameters[0]]
  const fcontact = {'key': {'participants': '0@s.whatsapp.net', 'remoteJid': 'status@broadcast', 'fromMe': false, 'id': getRandom(23)}, 'message': {'contactMessage': {'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:Sy;Bot;;;\nFN:y\nitem1.TEL;waid=${m.key.fromMe ? (sock.user.id.split(":")[0]+'@s.whatsapp.net' || sock.user.id) : (m.key.participant || m.key.remoteJid).split('@')[0]}:${m.key.fromMe ? (sock.user.id.split(":")[0]+'@s.whatsapp.net' || sock.user.id) : (m.key.participant || m.key.remoteJid).split("@")[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`}}, 'participant': '0@s.whatsapp.net'}
  let txt: string
  let pp
  let paramaters: string[] = m.messageStubParameters || []
  const Iactions = {
    [proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_ADD]: async () => {
      pp = await patchImage(sock, m, 'welcome')
      txt = chats.welcomeMessage ? chats.welcomeMessage.replace("{name}",  "@" + m.messageStubParameters[0].split('@')[0]) : `@${m.messageStubParameters[0].split('@')[0]} fue agregado por @${sender.split('@')[0]}`
      sock.sendImage(m.key.remoteJid, pp, txt, fcontact, { mentions: mentionsString})
    },
    [proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_REMOVE]: async () => {
      pp = await patchImage(sock, m, 'goodbye')
      txt = `@${m.messageStubParameters[0].split('@')[0]} fue expulsado por @${sender.split('@')[0]}`
      sock.sendImage(m.key.remoteJid, pp, txt, fcontact, { mentions: mentionsString})
    },
    [proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_PROMOTE]: async () => {
      txt =  `*hay un nuevo admin en el grupo ${groupName}*\n*-Nuevo admin*: @${m.messageStubParameters[0].split('@')[0]}\n*-Promovido por*:@${sender.split("@")[0]}`
      sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString }, { quoted: fcontact })
    },
    [proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_DEMOTE]: async () => {
      txt = `*se elimino a un admin en el grupo ${groupName}*\n*-Nuevo usuario*: @${m.messageStubParameters[0].split('@')[0]}\n*-eliminado de admins por*: @${m.key.fromMe ? (sock.user.id.split(":")[0]+'@s.whatsapp.net' || sock.user.id) : (m.key.participant || m.key.remoteJid).split("@")[0]}}`
      sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString }, { quoted: fcontact })
    },


  }
  switch(m?.messageStubType) {
    case chats?.detect && proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_PROMOTE:
      txt =  `*hay un nuevo admin en el grupo ${groupName}*\n*-Nuevo admin*: @${m.messageStubParameters[0].split('@')[0]}\n*-Promovido por*:@${sender.split("@")[0]}`
      sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString }, { quoted: fcontact })
    break
    case chats?.detect && proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_DEMOTE:
      txt = `*se elimino a un admin en el grupo ${groupName}*\n*-Nuevo usuario*: @${m.messageStubParameters[0].split('@')[0]}\n*-eliminado de admins por*: @${m.key.fromMe ? (sock.user.id.split(":")[0]+'@s.whatsapp.net' || sock.user.id) : (m.key.participant || m.key.remoteJid).split("@")[0]}}`
      sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString }, { quoted: fcontact })
    break
    case chats?.detect && proto.WebMessageInfo.StubType.GROUP_CHANGE_ANNOUNCE:
      switch (paramaters[0]) {
        case 'on':
          txt = `@${sender.split('@')[0]} cambio los ajustes para que solo los admins puedan enviar mensajes`
          sock.sendMessage(m.key.remoteJid, { text: txt, mentions: [sender] }, { quoted: fcontact })
        break
        case 'off':
          txt = `@${sender.split('@')[0]} cambio los ajustes para que todos puedan enviar mensajes`
          sock.sendMessage(m.key.remoteJid, { text: txt, mentions: [sender] }, { quoted: fcontact })
        break
      }
    break
    case chats?.welcome && proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_LEAVE:
      pp = await patchImage(sock, m, 'goodbye')
      
      txt = `@${m.messageStubParameters[0].split('@')[0]} salio del grupo. que le vaya bien`
      sock.sendImage(m.key.remoteJid, pp, txt, fcontact, { mentions: mentionsString})
    break
    case chats.welcome && proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_REMOVE:
      pp = await patchImage(sock, m, 'goodbye')
      txt = `@${m.messageStubParameters[0].split('@')[0]} fue expulsado por @${sender.split('@')[0]}`
      sock.sendImage(m.key.remoteJid, pp, txt, fcontact, { mentions: mentionsString})
      
    break
    case chats?.welcome && proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_ADD:
       pp = await patchImage(sock, m, 'welcome')
       txt = chats.welcomeMessage ? chats.welcomeMessage.replace("{name}",  "@" + m.messageStubParameters[0].split('@')[0]) : `@${m.messageStubParameters[0].split('@')[0]} fue agregado por @${sender.split('@')[0]}`
       sock.sendImage(m.key.remoteJid, pp, txt, fcontact, { mentions: mentionsString})
    break
    case chats?.welcome && proto.WebMessageInfo.StubType.GROUP_PARTICIPANT_ACCEPT:
       pp = await patchImage(sock, m, 'welcome')
       txt = `@${m.messageStubParameters[0].split('@')[0]} fue aceptado por @${sender.split('@')[0]}`
       sock.sendImage(m.key.remoteJid, pp, txt, fcontact, { mentions: mentionsString})
    break
    case chats.detect && proto.WebMessageInfo.StubType.GROUP_MEMBER_ADD_MODE:
      switch(paramaters[0]) {
        case 'admin_add':
          txt = `@${sender.split('@')[0]} desactivo que los miembros añadan a otros`
          sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString}, { quoted: fcontact})
        break
        case 'all_member_add':
          txt = `@${sender.split('@')[0]} permitio que los miembros añadan a otros`
          sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString}, { quoted: fcontact})
        break
      }     
    break
    case chats.detect && proto.WebMessageInfo.StubType.GROUP_CHANGE_INVITE_LINK:
      const link = "https://whatsapp.com" + await sock.groupInviteCode(m.key.remoteJid)
      txt = `@${sender.split("@")[0]} cambio el link del grupo\n~nuevo link: ${link}`
      sock.sendText(m.key.remoteJid, txt, fcontact)
    break
    case chats.detect && proto.WebMessageInfo.StubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE:
      switch(paramaters[0]) {
        case 'on':
          txt = `@${sender.split('@')[0]} activo la aprobacion de admins`
          sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString}, { quoted: fcontact})
        break
        case 'off':
          txt = `@${sender.split('@')[0]} desactivo la aprobacion de admins`
          sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString}, { quoted: fcontact})
        break
      }
    break
    case chats.detect && proto.WebMessageInfo.StubType.GROUP_CHANGE_SUBJECT:
      txt = `@${sender.split('@')[0]} cambio el nombre del grupo\nNuevo nombre: ${groupMetadata.subject}`
      sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString}, { quoted: fcontact})
    break
    case chats.detect && proto.WebMessageInfo.StubType.GROUP_CHANGE_ICON:
      let picture: string
      picture = await sock.profilePictureUrl(m.key?.remoteJid, "image")
      txt = `@${sender.split('@')[0]} cambio la foto del grupo`
      sock.sendImage(m.key.remoteJid, picture, txt, fcontact, {mentions: mentionsString})
    break

    case chats.detect && proto.WebMessageInfo.StubType.GROUP_CHANGE_RESTRICT:
      switch(paramaters[0]) {
        case 'on':
          txt = `@${sender.split('@')[0]} cambio los ajustes para que los miembros editen la informacion del grupo`
          sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString}, { quoted: fcontact})
        break
        case 'off':
          txt = `@${sender.split('@')[0]} cambio los ajustes para que solo los admins editen la informacion del grupo`
          sock.sendMessage(m.key.remoteJid, { text: txt, mentions: mentionsString}, { quoted: fcontact})
        break
      }
    break

  }
}